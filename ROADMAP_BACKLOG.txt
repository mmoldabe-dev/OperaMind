OperaMind – Структурированный бэклог улучшений
Последнее обновление: 2025-10-06

============================
A. ОБЯЗАТЕЛЬНО (MUST HAVE)
============================
1. Глобальная аналитика (страница /admin/analytics)
   - Метрики: общее кол-во разговоров, распределения статусов, тональностей, срочности
   - Топ ключевые слова (глобально + по роли/оператору)
   - Средняя длительность, среднее время обработки (transcribing -> completed)
   - Производительность операторов (завершённых / ошибок / среднее время)
2. Навигация по ролям в base.html
   - Добавить ссылки: История (всем), Статистика (/stats для пользователя), Все разговоры (/admin/history для админа), Пользователи (/admin/users), Аналитика (/admin/analytics)
   - Скрывать недоступные пункты по role
3. Страница персональной статистики пользователя (/stats)
   - Отдельно от /history, без смешивания логики
   - Метрики: динамика по дням, распределение статусов, тональность, urgency, ключевые слова
4. Backend агрегирующие запросы (убрать тяжёлую Jinja-агрегацию из шаблонов)
   - В admin.py и новом stats контроллере: group_by(status), group_by(sentiment), group_by(urgency)
   - Подсчёт top keywords через JSON извлечение и Counter в Python (или вынос в отдельную таблицу позже)
5. Пагинация таблиц (история /admin/history, /history, /admin/user/<id>/history)
   - Query параметр page, лимит (напр. 25)
6. Фильтры истории (глобально и у пользователя)
   - По статусу, диапазону дат, частичный поиск по имени файла
7. Заполнение и отображение длительности (conversation.duration)
   - Парсить длительность при транскрипции (из метаданных аудиофайла) и показывать
8. Обработка ошибок и UX статусов
   - Плашка в реальном времени (polling или WebSocket в будущем)
   - Понятный вывод при status=error (показывать текст ошибки)
9. Строгая роль/доступ
   - Декоратор @role_required('ADMIN') для admin blueprint
   - Проверить все маршруты на прямой доступ
10. Удаление синхронных блокировок
   - Вынести транскрипцию/анализ в фон (Celery/RQ) – подготовить архитектуру (минимум очередь + async статус)

============================
B. ВАЖНО (SHOULD HAVE / СЛЕДУЮЩИЙ ЭТАП)
============================
1. Экспорт данных
   - CSV/Excel экспорт истории (глобально и для пользователя)
   - Отдельный экспорт отчёта по множеству разговоров (zip)
2. Улучшение качества транскрипции
   - Диаризация (speaker labeling) улучшенная
   - Автоматическое определение языка
   - Нормализация пунктуации
3. Улучшение анализа
   - Более точная оценка operator_quality (метрика по структуре диалога)
   - Детектирование негативных паттернов (перебивание, длинные паузы)
4. Кэширование повторных вычислений
   - Redis layer для частых глобальных агрегатов
5. Улучшенная безопасность
   - Политика паролей (минимальная длина, сложность)
   - Rate limiting (Flask-Limiter) на логин
   - Логирование подозрительных попыток
6. Улучшение UI
   - Темная тема (CSS переключатель)
   - Адаптив для мобильных (проверить таблицы)
7. Массовые действия
   - Batch удаление / batch экспорт разговоров
8. Улучшение keyword extraction
   - Лемматизация / нормализация стоп-слов
   - Взвешивание (TF-IDF) для глобальной аналитики
9. Notifications
   - Email / Web уведомление «анализ завершен» (через фон задачу)
10. Улучшенная структура API
   - Ввести /api/v1/** endpoints (история, аналитика) с auth token (JWT)

============================
C. ОПЦИОНАЛЬНО (NICE TO HAVE)
============================
1. WebSocket/Server-Sent Events прогресс обработки
2. Live-транскрипция (стрим микрофона)
3. Поддержка нескольких языков интерфейса (i18n)
4. Персональные доски KPI для операторов
5. Отображение временной шкалы разговора (waveform + сегменты речи)
6. Интеграции: Slack / Telegram уведомления
7. Роли расширенные: SUPERVISOR (надзор за группой операторов)
8. Архивирование старых записей (offload в S3 / object storage)
9. Настройка порогов угроз (критичность) через UI (SystemSettings)
10. Визуализация сетки ключевых слов (word cloud SVG)

============================
D. ТЕХНИЧЕСКИЙ ДОЛГ / РЕФАКТОР
============================
1. Вынести бизнес-логику из app.py в отдельные сервисы
2. Модульная структура: services/, repositories/, schemas/
3. Отдельный blueprint для conversation операций
4. Убрать логику агрегаций из Jinja (сейчас в history/admin_history)
5. Добавить типизацию (mypy/pyright) и pydantic схемы для API
6. Унифицировать компонентные куски: стат-карты, мини-чарты → partials
7. Выделить общий JS (мини‑чарты) в /static/js/ui.js
8. Собрать CSS переменные в один файл base.css и минифицировать
9. Внедрить Alembic миграции вместо пересоздания БД
10. Подготовить Dockerfile + docker-compose (web + redis + worker)

============================
E. ТЕСТЫ И КАЧЕСТВО
============================
1. Unit тесты: модели, утилиты анализа
2. Integration: загрузка файла → статус completed → проверка анализа
3. API тесты (pytest + flask test client)
4. Линтеры: flake8 / black / isort / mypy
5. CI: GitHub Actions workflow (lint + tests)
6. Smoke test скрипт (check_health.py)
7. Нагрузочный тест транскрипции (скрипт с 10–20 файлами)

============================
F. ПРОИЗВОДИТЕЛЬНОСТЬ
============================
1. Асинхронная очередь обработки (Celery + Redis)
2. Предзагрузка модели транскрипции (ленивая инициализация единожды)
3. Batch анализ нескольких разговоров
4. Индексы в БД: Conversation.status, upload_date, user_id
5. Денормализация счетчиков (кеш таблица aggregated_metrics)

============================
G. НАБЛЮДАЕМОСТЬ / ЛОГИ
============================
1. Structured logging (JSON) для обработки этапов
2. Таблица AuditLog (уже есть зачатки?) – расширить: кто что удалил/скачал
3. Метрики Prometheus (обработка времени транскрипции/анализа)
4. Error tracking (Sentry)
5. Health endpoint /healthz

============================
H. БЕЗОПАСНОСТЬ
============================
1. CSRF защита для всех POST (Flask-WTF или встроенный токен)
2. Пароли – смена/сброс, токен восстановления
3. Ограничение загрузки форматов + MIME валидация
4. Верификация размера файла и duration < лимита
5. Sanitize выводимых текстов (escape при необходимости)

============================
I. UX / ИНТЕРАКТИВ
============================
1. Inline фильтры на таблицах (быстрый поиск по имени)
2. Sticky header у больших таблиц
3. Сортировка колонок (JS)
4. «Сценарии использования» подсказки для новых пользователей
5. Skeleton состояния при загрузке аналитики

============================
J. ДАЛЬНЕЙШЕЕ РАСШИРЕНИЕ (R&D)
============================
1. Авто суммаризация нескольких разговоров (кластеризация тем)
2. Обнаружение эмоциональных пиков (эмо-модель)
3. Semantic search по транскриптам (векторный индекс)
4. Обучение кастомного классификатора категорий на пользовательских тегах
5. Авто тегирование на основе ключевых фраз

============================
K. КРАТКИЙ ПРИОРИТЕТНЫЙ ЧЕК-ЛИСТ ПЕРВЫХ 2 НЕДЕЛЬ
============================
[ ] /admin/analytics (MVP)
[ ] /stats для пользователя
[ ] Ролевое меню навигации
[ ] Перенос агрегатов в backend
[ ] Пагинация и фильтры истории
[ ] Индексы БД + Alembic
[ ] Docker + Gunicorn + Nginx (prod-ready шаг)
[ ] Очередь (черновая) для транскрипции
[ ] CI pipeline (lint + tests)
[ ] Минимальный набор unit тестов

============================
ЗАМЕТКИ
============================
- Текущее состояние: часть агрегатов считается прямо в Jinja → переместить в Python чтобы снизить риск ошибок и ускорить.
- Ключевые слова пока простые: можно расширить NLP пайплайн.
- Ограничение синхронной обработки станет узким местом при росте.

Конец файла.

"""
OperaMind - –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ Gemini 2.x
"""

import google.generativeai as genai
import os
from dotenv import load_dotenv
import json
import time

load_dotenv()

def analyze_transcript(transcript):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    
    Args:
        transcript (str): –¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
    Returns:
        dict: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        print("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä —á–µ—Ä–µ–∑ Gemini...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            raise Exception("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        genai.configure(api_key=api_key)
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.

–¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{transcript}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "topic": "–∫—Ä–∞—Ç–∫–∞—è —Ç–µ–º–∞ (1-3 —Å–ª–æ–≤–∞)",
    "category": "–æ–¥–Ω–∞ –∏–∑: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è/–±–∏–ª–ª–∏–Ω–≥/–ø—Ä–æ–¥–∞–∂–∏/–∂–∞–ª–æ–±–∞/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/–¥—Ä—É–≥–æ–µ",
    "sentiment": "–æ–¥–∏–Ω –∏–∑: –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π",
    "urgency": "–æ–¥–∏–Ω –∏–∑: –Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è/–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è",
    "keywords": ["–∫–ª—é—á1", "–∫–ª—é—á2", "–∫–ª—é—á3", "–∫–ª—é—á4", "–∫–ª—é—á5"],
    "summary": "–∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö",
    "detailed_analysis": "–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞, –∫–∞–∫ —Ä–µ—à–µ–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—è",
    "operator_quality": "–æ—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–ª–∏—á–Ω–æ/—Ö–æ—Ä–æ—à–æ/—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ/–ø–ª–æ—Ö–æ)",
    "recommendations": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
}}"""
        
        # –ê–ö–¢–£–ê–õ–¨–ù–´–ï –º–æ–¥–µ–ª–∏ Gemini 2.x (–∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞)
        models_priority = [
            'models/gemini-2.0-flash',           # –û—Å–Ω–æ–≤–Ω–∞—è - –±—ã—Å—Ç—Ä–∞—è
            'models/gemini-2.5-flash',           # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            'models/gemini-flash-latest',        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
            'models/gemini-2.0-flash-lite',      # –õ—ë–≥–∫–∞—è –≤–µ—Ä—Å–∏—è
            'models/gemini-2.5-flash-lite',      # –ù–æ–≤–∞—è –ª—ë–≥–∫–∞—è
        ]
        
        last_error = None
        
        for model_name in models_priority:
            try:
                print(f"   –ü—Ä–æ–±—É—é –º–æ–¥–µ–ª—å: {model_name}")
                
                model = genai.GenerativeModel(model_name)
                response = model.generate_content(prompt)
                
                result_text = response.text.strip()
                
                # –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown
                if result_text.startswith('```'):
                    parts = result_text.split('```')
                    if len(parts) >= 2:
                        result_text = parts[1]
                        if result_text.startswith('json'):
                            result_text = result_text[4:]
                
                result_text = result_text.strip()
                analysis = json.loads(result_text)
                
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! (–º–æ–¥–µ–ª—å: {model_name})")
                return analysis
                
            except Exception as e:
                error_str = str(e)
                last_error = e
                
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
                if "429" in error_str or "quota" in error_str.lower():
                    print(f"   ‚ö†Ô∏è  –ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞ –¥–ª—è {model_name}, –ø—Ä–æ–±—É—é –¥—Ä—É–≥—É—é...")
                    time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue
                else:
                    print(f"   ‚ùå {model_name}: {error_str[:100]}")
                    continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        raise Exception(f"–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return create_fallback_analysis()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return create_fallback_analysis()


def create_fallback_analysis():
    """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    return {
        "topic": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
        "category": "–¥—Ä—É–≥–æ–µ",
        "sentiment": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
        "urgency": "—Å—Ä–µ–¥–Ω—è—è",
        "keywords": ["—Ä–∞–∑–≥–æ–≤–æ—Ä", "–∫–ª–∏–µ–Ω—Ç", "–æ–ø–µ—Ä–∞—Ç–æ—Ä"],
        "summary": "–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.",
        "detailed_analysis": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
        "operator_quality": "–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ",
        "recommendations": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤—Ä—É—á–Ω—É—é."
    }
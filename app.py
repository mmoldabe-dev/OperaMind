"""
OperaMind - –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2
–†–∞–∑–¥–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑
"""

import os
from flask import Flask, render_template, request, redirect, url_for, flash, send_file
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from werkzeug.utils import secure_filename
from datetime import datetime
from dotenv import load_dotenv
import json
from io import BytesIO

from models import db, User, Conversation, Analysis
from transcriber import transcribe_audio_file, transcribe_from_text
from analyzer import analyze_transcript
from stats import stats_bp
from stats_user import stats_user_bp
from admin import admin_bp

load_dotenv()

app = Flask(__name__)

app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'operamind-secret-key-2025')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///operamind.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024

ALLOWED_EXTENSIONS = {'mp3', 'wav', 'm4a', 'ogg', 'txt'}

db.init_app(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@app.template_filter('from_json')
def from_json_filter(value):
    if isinstance(value, str):
        try:
            return json.loads(value)
        except:
            return []
    return value if isinstance(value, list) else []

@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        user = User.query.filter_by(username=username).first()
        
        if user and user.check_password(password):
            login_user(user)
            flash('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OperaMind!', 'success')
            return redirect(url_for('index'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info')
    return redirect(url_for('login'))

@app.route('/')
@login_required
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
@login_required
def upload_file():
    if 'file' not in request.files:
        flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
        return redirect(url_for('index'))
    
    file = request.files['file']
    
    if file.filename == '':
        flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
        return redirect(url_for('index'))
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{timestamp}_{filename}"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        file.save(filepath)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        conversation = Conversation(
            filename=filename,
            filepath=filepath,
            user_id=current_user.id,
            status='pending'
        )
        db.session.add(conversation)
        db.session.commit()
        
        flash(f'‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!', 'success')
        
        # –≠–¢–ê–ü 1: –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø
        print("\n" + "="*60)
        print("–≠–¢–ê–ü 1: –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø")
        print("="*60)
        
        conversation.status = 'transcribing'
        db.session.commit()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if filename.endswith('.txt'):
                with open(filepath, 'r', encoding='utf-8') as f:
                    structured_transcript = transcribe_from_text(f.read())
                print("‚úÖ –¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                structured_transcript = transcribe_audio_file(filepath)

            if not structured_transcript:
                raise Exception("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø–æ–ª–Ω—ã–π –ø–ª–æ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            flat_text = None
            try:
                import json as _json
                data_tr = _json.loads(structured_transcript)
                if isinstance(data_tr, dict) and 'text' in data_tr:
                    flat_text = data_tr.get('text')
                else:
                    flat_text = structured_transcript
            except Exception:
                flat_text = structured_transcript
            
            # –≠–¢–ê–ü 2: –ê–ù–ê–õ–ò–ó
            print("\n" + "="*60)
            print("–≠–¢–ê–ü 2: –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–ê")
            print("="*60)
            
            conversation.status = 'analyzing'
            db.session.commit()
            
            analysis_result = analyze_transcript(flat_text)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            analysis = Analysis(
                conversation_id=conversation.id,
                transcript=structured_transcript,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON
                topic=analysis_result.get('topic'),
                category=analysis_result.get('category'),
                sentiment=analysis_result.get('sentiment'),
                urgency=analysis_result.get('urgency'),
                keywords=json.dumps(analysis_result.get('keywords', []), ensure_ascii=False),
                summary=analysis_result.get('summary'),
                detailed_analysis=analysis_result.get('detailed_analysis'),
                operator_quality=analysis_result.get('operator_quality'),
                recommendations=analysis_result.get('recommendations')
            )
            
            conversation.status = 'completed'
            db.session.add(analysis)
            db.session.commit()
            
            flash('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success')
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            conversation.status = 'error'
            db.session.commit()
            flash(f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}', 'error')
        
        return redirect(url_for('conversation_detail', conversation_id=conversation.id))
    else:
        flash('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: MP3, WAV, M4A, OGG, TXT', 'error')
        return redirect(url_for('index'))

@app.route('/history')
@login_required
def history():
    conversations = Conversation.query.filter_by(
        user_id=current_user.id
    ).order_by(
        Conversation.upload_date.desc()
    ).all()
    
    return render_template('history.html', conversations=conversations)

@app.route('/conversation/<int:conversation_id>')
@login_required
def conversation_detail(conversation_id):
    conversation = Conversation.query.get_or_404(conversation_id)
    # –î–æ—Å—Ç—É–ø: –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω
    if conversation.user_id != current_user.id and not getattr(current_user, 'is_admin', False):
        flash('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', 'error')
        return redirect(url_for('history'))
    return render_template('conversation_detail.html', conversation=conversation)

@app.route('/download/<int:conversation_id>')
@login_required
def download_report(conversation_id):
    """–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—É"""
    conversation = Conversation.query.get_or_404(conversation_id)
    
    if conversation.user_id != current_user.id:
        flash('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', 'error')
        return redirect(url_for('history'))
    
    if not conversation.analysis:
        flash('‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'error')
        return redirect(url_for('conversation_detail', conversation_id=conversation_id))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    a = conversation.analysis
    keywords = json.loads(a.keywords) if a.keywords else []
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    pretty_transcript = a.transcript
    try:
        data_t = json.loads(a.transcript)
        if isinstance(data_t, dict) and 'segments' in data_t:
            lines = []
            for seg in data_t.get('segments', []):
                speaker = seg.get('speaker', 'unknown')
                role = '–ö–ª–∏–µ–Ω—Ç' if speaker == 'client' else ('–û–ø–µ—Ä–∞—Ç–æ—Ä' if speaker == 'operator' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                start = seg.get('start', 0)
                end = seg.get('end', 0)
                text_line = seg.get('text', '')
                lines.append(f"[{start:06.2f}‚Äì{end:06.2f}] {role}: {text_line}")
            pretty_transcript = "\n".join(lines)
    except Exception:
        pass

    report = f"""
–û–¢–ß–Å–¢ –ü–û –†–ê–ó–ì–û–í–û–†–£
{'='*70}

–§–ê–ô–õ: {conversation.filename}
–î–ê–¢–ê: {conversation.upload_date.strftime('%d.%m.%Y %H:%M')}

{'='*70}
–ö–†–ê–¢–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
{'='*70}

–¢–µ–º–∞: {a.topic}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {a.category}
–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {a.sentiment}
–°—Ä–æ—á–Ω–æ—Å—Ç—å: {a.urgency}
–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {a.operator_quality}

{'='*70}
–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê
{'='*70}

{', '.join(keywords)}

{'='*70}
–ö–†–ê–¢–ö–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï
{'='*70}

{a.summary}

{'='*70}
–ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó
{'='*70}

{a.detailed_analysis}

{'='*70}
–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
{'='*70}

{a.recommendations}

{'='*70}
–ü–û–õ–ù–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø (–î–ò–ê–õ–û–ì)
{'='*70}

{pretty_transcript}

{'='*70}
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π OperaMind
"""
    
    # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    output = BytesIO()
    output.write(report.encode('utf-8'))
    output.seek(0)
    
    return send_file(
        output,
        as_attachment=True,
        download_name=f'report_{conversation.id}_{datetime.now().strftime("%Y%m%d")}.txt',
        mimetype='text/plain'
    )

@app.route('/delete/<int:conversation_id>', methods=['POST'])
@login_required
def delete_conversation(conversation_id):
    conversation = Conversation.query.get_or_404(conversation_id)
    
    if conversation.user_id != current_user.id:
        flash('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', 'error')
        return redirect(url_for('history'))
    
    if os.path.exists(conversation.filepath):
        os.remove(conversation.filepath)
    
    db.session.delete(conversation)
    db.session.commit()
    
    flash('üóëÔ∏è –†–∞–∑–≥–æ–≤–æ—Ä —É–¥–∞–ª—ë–Ω', 'success')
    return redirect(url_for('history'))

app.register_blueprint(stats_bp)
app.register_blueprint(stats_user_bp)
app.register_blueprint(admin_bp)

if __name__ == '__main__':
    app.run(debug=True)
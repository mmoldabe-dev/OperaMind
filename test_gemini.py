"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Gemini API
"""

import google.generativeai as genai
import os
from dotenv import load_dotenv

load_dotenv()

def test_gemini_api():
    api_key = os.getenv('GEMINI_API_KEY')
    
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    try:
        genai.configure(api_key=api_key)
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è generateContent:\n")
        
        available = []
        for model in genai.list_models():
            if 'generateContent' in model.supported_generation_methods:
                available.append(model.name)
                print(f"   ‚úì {model.name}")
        
        if not available:
            print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π!")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥–µ–ª—å: {available[0]}\n")
        
        model = genai.GenerativeModel(available[0])
        response = model.generate_content("–°–∫–∞–∂–∏ '–ø—Ä–∏–≤–µ—Ç' –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.text}\n")
        
        print("="*60)
        print("‚úÖ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –º–æ–¥–µ–ª—å –≤ analyzer.py:")
        print(f"   model = genai.GenerativeModel('{available[0]}')")
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
        print("   2. API –∫–ª—é—á –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ https://makersuite.google.com/")
        print("   3. –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("   4. –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install --upgrade google-generativeai")

if __name__ == '__main__':
    test_gemini_api()
"""
OperaMind - –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–æ–ª—è–º–∏)
"""

from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash
from enum import Enum

db = SQLAlchemy()

class UserRole(Enum):
    USER = "user"
    OPERATOR = "operator"
    ADMIN = "admin"

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)
    is_active = db.Column(db.Boolean, default=True)
    
    role = db.Column(db.Enum(UserRole), default=UserRole.OPERATOR, nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    
    full_name = db.Column(db.String(200))
    department = db.Column(db.String(100))
    phone = db.Column(db.String(20))
    
    conversations = db.relationship('Conversation', backref='user', lazy=True, cascade='all, delete-orphan')
    
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)
    
    @property
    def is_administrator(self):
        return self.role == UserRole.ADMIN or self.is_admin
    
    @property
    def is_admin_property(self):
        return self.is_administrator
    
    @property
    def is_operator(self):
        return self.role == UserRole.OPERATOR
    
    @property
    def role_display(self):
        role_names = {
            UserRole.USER: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            UserRole.OPERATOR: "–û–ø–µ—Ä–∞—Ç–æ—Ä",
            UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        return role_names.get(self.role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    def can_access_admin_panel(self):
        return self.is_administrator
    
    def can_view_all_conversations(self):
        return self.is_administrator
    
    def can_manage_users(self):
        return self.is_administrator
    
    def __repr__(self):
        return f'<User {self.username} ({self.role_display})>'


class Conversation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(255), nullable=False)
    filepath = db.Column(db.String(500), nullable=False)
    duration = db.Column(db.Integer)
    upload_date = db.Column(db.DateTime, default=datetime.utcnow)
    status = db.Column(db.String(50), default='pending')
    file_size = db.Column(db.Integer)
    mime_type = db.Column(db.String(100))
    
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    analysis = db.relationship('Analysis', backref='conversation', uselist=False, cascade='all, delete-orphan')
    
    @property
    def status_display(self):
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å"""
        status_names = {
            'queued': 'üìã –í –æ—á–µ—Ä–µ–¥–∏',
            'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            'transcribing': 'üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è',
            'analyzing': 'ü§ñ –ê–Ω–∞–ª–∏–∑',
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            'error': '‚ùå –û—à–∏–±–∫–∞'
        }
        return status_names.get(self.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    @property
    def file_size_display(self):
        """–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if not self.file_size:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        if self.file_size < 1024:
            return f"{self.file_size} –ë"
        elif self.file_size < 1024 * 1024:
            return f"{self.file_size / 1024:.1f} –ö–ë"
        else:
            return f"{self.file_size / (1024 * 1024):.1f} –ú–ë"
    
    def __repr__(self):
        return f'<Conversation {self.filename}>'


class Analysis(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    conversation_id = db.Column(db.Integer, db.ForeignKey('conversation.id'), nullable=False)
    
    transcript = db.Column(db.Text)
    
    topic = db.Column(db.String(100))
    category = db.Column(db.String(50))
    sentiment = db.Column(db.String(50))
    urgency = db.Column(db.String(50))
    keywords = db.Column(db.Text)
    summary = db.Column(db.Text)
    
    detailed_analysis = db.Column(db.Text)
    operator_quality = db.Column(db.String(50))
    recommendations = db.Column(db.Text)
    
    quality_score = db.Column(db.Float)
    response_time_rating = db.Column(db.String(20))
    politeness_rating = db.Column(db.String(20))
    problem_solved = db.Column(db.Boolean)
    
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    @property
    def sentiment_display(self):
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
        sentiment_names = {
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            'positive': '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è',
            'negative': '–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è', 
            'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è',
            'mixed': '–°–º–µ—à–∞–Ω–Ω–∞—è',
            # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–∏–∑ Gemini)
            '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π': '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è',
            '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π': '–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è',
            '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è',
            '—Å–º–µ—à–∞–Ω–Ω—ã–π': '–°–º–µ—à–∞–Ω–Ω–∞—è'
        }
        return sentiment_names.get(self.sentiment, '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
    
    @property
    def urgency_display(self):
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å"""
        urgency_names = {
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            'low': '–ù–∏–∑–∫–∞—è',
            'medium': '–°—Ä–µ–¥–Ω—è—è',
            'high': '–í—ã—Å–æ–∫–∞—è',
            'critical': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è',
            # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–∏–∑ Gemini)
            '–Ω–∏–∑–∫–∞—è': '–ù–∏–∑–∫–∞—è',
            '—Å—Ä–µ–¥–Ω—è—è': '–°—Ä–µ–¥–Ω—è—è',
            '–≤—ã—Å–æ–∫–∞—è': '–í—ã—Å–æ–∫–∞—è',
            '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è'
        }
        return urgency_names.get(self.urgency, '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
    
    def __repr__(self):
        return f'<Analysis for Conversation {self.conversation_id}>'


class SystemSettings(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text)
    description = db.Column(db.String(255))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class AuditLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    action = db.Column(db.String(100), nullable=False)
    details = db.Column(db.Text)
    ip_address = db.Column(db.String(45))
    user_agent = db.Column(db.String(500))
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    
    user = db.relationship('User', backref='audit_logs')
    
    def __repr__(self):
        return f'<AuditLog {self.user.username}: {self.action}>'